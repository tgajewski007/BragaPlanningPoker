<?php
/**
 * Created on 04-02-2014 08:20:35
 *
 * @author Tomasz Gajewski
 * @package PlaningPoker
 * error prefix PP:110
 * Generated by SimplePHPDAOClassGenerator ver 2.2.0
 * https://sourceforge.net/projects/simplephpdaogen/
 * {please complete documentation}
 */
class User extends UserDAO implements DAO
{
	// -------------------------------------------------------------------------
	public function getEmailAddress()
	{
		return new EmailAddress($this->getName(), $this->getEmail());
	}
	// -------------------------------------------------------------------------
	/**
	 * Methods validate data before save
	 * @return boolean
	 */
	protected function check()
	{
		$retval = true;
		if(mb_strlen($this->getUserName()) == 0)
		{
			addAlert("PP:11001 Username is requered");
			$retval = false;
		}
		if(strlen($this->getEmail()) > 0)
		{
			if(!isEmail($this->getEmail()))
			{
				addAlert("PP:11002 Email appears to be invalid");
				$retval = false;
			}
		}
		try
		{
			$tmpUser = self::retrieveByUserName($this->getUserName());
			if($tmpUser->getIdUser() != $this->getIdUser())
			{
				addAlert("PP:11003 Username is already registered");
				$retval = false;
			}
		}
		catch(Exception $e)
		{
			// its OK
		}

		return $retval;
	}
	// -------------------------------------------------------------------------
	/**
	 * Method saves the object of the classUser
	 * @return boolean
	 */
	public function save()
	{
		if($this->check())
		{
			if($this->isReaded())
			{
				return $this->update();
			}
			else
			{
				$this->setIdUser(Guid::get());
				$this->setPassTruePhase(getRandomString(32));
				$this->setPassword(getHashPass($this->getPassword(), $this->getIdUser()));
				$this->setUserNameHash(sha1($this->getUserName()));
				return $this->create();
			}
		}
		else
		{
			return false;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param string $userName
	 * @throws Exception
	 * @return User
	 */
	static function retrieveByUserName($userName)
	{
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".user ";
		$sql .= "WHERE user_name_hash = :USER_NAME ";
		$db->setParam("USER_NAME", sha1($userName));
		$db->query($sql);
		if($db->nextRecord())
		{
			return self::getByDataSource($db);
		}
		else
		{
			throw new Exception("PP:11010 No User");
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method removes an object of class User
	 * @return boolean
	 */
	public function kill()
	{
		// TODO: this method may be changed when record can not be deleted from
		// table
		return $this->destroy();
	}
	// -------------------------------------------------------------------------
	/**
	 * This method returns a collection of objects
	 * @return Collection &lt;User&gt;
	 */
	public static function getAll()
	{
		// TODO: this is example of method selecting multi rec from table
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".user ";
		$db->query($sql);
		return new Collection($db, self::get());
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param string $userName
	 * @param string $password
	 * @return User
	 */
	public static function login($userName, $password)
	{
		try
		{
			$u = self::retrieveByUserName($userName);
			if($u->getPassword() == getHashPass($password, $u->getIdUser()))
			{
				$u->setLastLogin(date(PHP_DATETIME_FORMAT));
				return $u;
			}
			else
			{
				addAlert("PP:11011 Access denied");
				return null;
			}
		}
		catch(Exception $e)
		{
			addAlert("PP:11012 Access denied");
			return null;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return User
	 */
	public static function getCurrent()
	{
		return Perms::getInstance()->getCurrentUser();
	}
	// -------------------------------------------------------------------------
}
?>