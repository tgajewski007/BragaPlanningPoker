<?php
/**
 * Created on 04-02-2014 08:20:35
 *
 * @author Tomasz Gajewski
 * @package PlaningPoker
 * error prefix PP:110
 * Generated by SimplePHPDAOClassGenerator ver 2.2.0
 * https://sourceforge.net/projects/simplephpdaogen/
 * {please complete documentation}
 */
class User extends UserDAO implements DAO
{
	// -------------------------------------------------------------------------
	/**
	 * Methods validate data before save
	 *
	 * @return boolean
	 */
	protected function check()
	{
		// TODO: add special validate
		return true;
	}
	// -------------------------------------------------------------------------
	/**
	 * Method saves the object of the classUser
	 *
	 * @return boolean
	 */
	public function save()
	{
		// TODO: please set atrib independens of clients ex lastupdate
		if($this->check())
		{
			if($this->isReaded())
			{
				return $this->update();
			}
			else
			{
				return $this->create();
			}
		}
		else
		{
			return false;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param string $userName
	 * @throws Exception
	 * @return User
	 */
	static function retrieveByUserName($userName)
	{
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".user ";
		$sql .= "WHERE user_name_hash = :USER_NAME ";
		$db->setParam("USER_NAME", sha1($userName));
		$db->query($sql);
		if($db->nextRecord())
		{
			return self::getByDataSource($db);
		}
		else
		{
			throw new Exception("PP:11010 No User");
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method removes an object of class User
	 *
	 * @return boolean
	 */
	public function kill()
	{
		// TODO: this method may be changed when record can not be deleted from
		// table
		return $this->destroy();
	}
	// -------------------------------------------------------------------------
	/**
	 * This method returns a collection of objects
	 *
	 * @return Collection &lt;User&gt;
	 */
	public static function getAll()
	{
		// TODO: this is example of method selecting multi rec from table
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".user ";
		$db->query($sql);
		return new Collection($db, self::get());
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param string $userName
	 * @param string $password
	 * @return User
	 */
	public static function login($userName, $password)
	{
		try
		{
			$u = self::retrieveByUserName($userName);
			if($u->getPassword() == getHashPass($password, $u->getIdUser()))
			{
				return $u;
			}
			else
			{
				addAlert("PP:11011 Access denied");
				return null;
			}
		}
		catch(Exception $e)
		{
			addAlert("PP:11012 Access denied");
			return null;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return User
	 */
	public static function getCurrent()
	{
		return Perms::getInstance()->getCurrentUser();
	}
	// -------------------------------------------------------------------------
}
?>