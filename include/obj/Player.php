<?php
/**
 * Created on 04-02-2014 08:20:35
 *
 * @author Tomasz Gajewski
 * @package PlaningPoker
 * error prefix PP:105
 * Generated by SimplePHPDAOClassGenerator ver 2.2.0
 * https://sourceforge.net/projects/simplephpdaogen/
 * {please complete documentation}
 */
class Player extends PlayerDAO implements DAO
{
	// -------------------------------------------------------------------------
	const PLAY = "PLAY";
	const OBSERVE = "OBSERVE";
	// -------------------------------------------------------------------------
	/**
	 * Methods validate data before save
	 * @return boolean
	 */
	protected function check()
	{
		// TODO: add special validate
		return true;
	}
	// -------------------------------------------------------------------------
	/**
	 * Methods return colection of Player
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAllByTable(TableDAO $table)
	{
		$db = new DB();
		$sql = "SELECT p.* ";
		$sql .= "FROM " . DB_SCHEMA . ".player p ";
		$sql .= "WHERE p.idtable = :IDTABLE ";
		$sql .= "AND p.status = :PLAY ";
		$sql .= "ORDER BY CASE  WHEN p.iduser = :IDUZYTKOWNIK THEN 0 ELSE p.idplayer END  ";
		$db->setParam("IDTABLE", $table->getIdTable());
		$db->setParam("IDUZYTKOWNIK", User::getCurrent()->getIdUser());
		$db->setParam("PLAY", Player::PLAY);
		$db->query($sql);
		return new Collection($db, Player::get());
	}
	// -------------------------------------------------------------------------
	/**
	 * Method saves the object of the classPlayer
	 * @return boolean
	 */
	public function save()
	{
		// TODO: please set atrib independens of clients ex lastupdate
		if($this->check())
		{
			if($this->isReaded())
			{
				return $this->update();
			}
			else
			{
				return $this->create();
			}
		}
		else
		{
			return false;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method removes an object of class Player
	 * @return boolean
	 */
	public function kill()
	{
		// TODO: this method may be changed when record can not be deleted from
		// table
		return $this->destroy();
	}
	// -------------------------------------------------------------------------
	/**
	 * This method returns a collection of objects
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAll()
	{
		// TODO: this is example of method selecting multi rec from table
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".player ";
		$db->query($sql);
		return new Collection($db, self::get());
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return Player
	 * @throws PlayerException
	 */
	public static function getCurrent()
	{
		if(isset($_SESSION[SessionName::CURRENT_PLAYER]))
		{
			return self::get($_SESSION[SessionName::CURRENT_PLAYER]);
		}
		else
		{
			$p = self::get();
			$p->setIdRole(Role::DEVELOPER);
			$p->setIdUser(User::getCurrent()->getIdUser());
			return $p;
		}
	}
	// -------------------------------------------------------------------------
	protected static function setCurrent(Player $p)
	{
		$_SESSION[SessionName::CURRENT_PLAYER] = $p->getIdPlayer();
	}
	// -------------------------------------------------------------------------
	public function getCurrentGame()
	{
		return Game::getCurrentGameForPlayer($this);
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param Table $t
	 * @throws PlayerException
	 */
	public function sitDownToTable(Table $t)
	{
		//TODO: być może sprawdzić czy nie jest pierwszy... i zrobić z niego ScrumMastera
		$this->setIdTable($t->getIdTable());
		$this->setStatus(self::PLAY);
		$this->save();
		self::setCurrent($this);
	}
	// -------------------------------------------------------------------------
	public function getUpFromTable()
	{
		$this->setStatus(self::OBSERVE);
		return $this->save();
	}
	// -------------------------------------------------------------------------
}
?>