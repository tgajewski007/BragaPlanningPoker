<?php
/**
 * Created on 04-02-2014 08:20:35
 *
 * @author Tomasz Gajewski
 * @package PlaningPoker
 * error prefix PP:105
 * Generated by SimplePHPDAOClassGenerator ver 2.2.0
 * https://sourceforge.net/projects/simplephpdaogen/
 * {please complete documentation}
 */
class Player extends PlayerDAO implements DAO
{
	// -------------------------------------------------------------------------
	/**
	 * Methods validate data before save
	 * @return boolean
	 */
	protected function check()
	{
		// TODO: add special validate
		return true;
	}
	// -------------------------------------------------------------------------
	/**
	 * Methods return colection of Player
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAllByTable(TableDAO $table)
	{
		$db = new DB();
		$sql = "SELECT p.* ";
		$sql .= "FROM " . DB_SCHEMA . ".player p ";
		$sql .= "INNER JOIN " . DB_SCHEMA . ".game g ON g.idplayer = p.idplayer ";
		$sql .= "WHERE p.idtable = :IDTABLE ";
		$sql .= "AND g.status = :OPEN ";
		$sql .= "ORDER BY CASE  WHEN p.iduser = :IDUZYTKOWNIK THEN 0 ELSE p.idplayer END  ";
		$db->setParam("IDTABLE", $table->getIdTable());
		$db->setParam("IDUZYTKOWNIK", User::getCurrent()->getIdUser());
		$db->setParam("OPEN", Game::OPEN);
		$db->query($sql);
		return new Collection($db, Player::get());
	}
	// -------------------------------------------------------------------------
	public static function retriveByTable(Table $t)
	{
		$db = new DB();
		$sql = "SELECT p.* ";
		$sql .= "FROM " . DB_SCHEMA . ".player p ";
		$sql .= "INNER JOIN " . DB_SCHEMA . ".game g ON g.idplayer = p.idplayer ";
		$sql .= "WHERE p.iduser = :IDUSER ";
		$sql .= "AND p.idtable = :IDTABLE ";
		$sql .= "AND g.status = :OPEN ";
		$sql .= "ORDER BY p.idplayer DESC ";
		$sql .= "LIMIT 1 ";
		$db->setParam("IDUSER", User::getCurrent()->getIdUser());
		$db->setParam("IDTABLE", $t->getIdTable());
		$db->setParam("OPEN", Game::OPEN);
		$db->query($sql);
		if($db->nextRecord())
		{
			return self::getByDataSource($db);
		}
		else
		{
			throw new PlayerException("PP:10510 No table found");
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method saves the object of the classPlayer
	 * @return boolean
	 */
	public function save()
	{
		// TODO: please set atrib independens of clients ex lastupdate
		if($this->check())
		{
			if($this->isReaded())
			{
				return $this->update();
			}
			else
			{
				return $this->create();
			}
		}
		else
		{
			return false;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method removes an object of class Player
	 * @return boolean
	 */
	public function kill()
	{
		// TODO: this method may be changed when record can not be deleted from
		// table
		return $this->destroy();
	}
	// -------------------------------------------------------------------------
	/**
	 * This method returns a collection of objects
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAll()
	{
		// TODO: this is example of method selecting multi rec from table
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".player ";
		$db->query($sql);
		return new Collection($db, self::get());
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return Player
	 * @throws PlayerException
	 */
	public static function getCurrent()
	{
		if(isset($_SESSION[SessionName::CURRENT_PLAYER]))
		{
			return self::get($_SESSION[SessionName::CURRENT_PLAYER]);
		}
		else
		{
			throw new PlayerException("PP:10512 There's no default player");
		}
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param Table $t
	 * @throws PlayerException
	 */
	public static function sitDownToTable(Table $t)
	{
		try
		{
			$p = self::retriveByTable($t);
		}
		catch(Exception $e)
		{
			$p = self::get();
			$p->setIdUser(User::getCurrent()->getIdUser());
			$p->setIdTable($t->getIdTable());
			$p->setIdRole(Role::getCurrent()->getIdRole());
			if(!$p->save())
			{
				throw new PlayerException("PP:10511 Can't create Player");
			}
		}
		Table::setCurrent($t);
		$_SESSION[SessionName::CURRENT_PLAYER] = $p->getIdPlayer();
	}
	// -------------------------------------------------------------------------
	public static function getUpFromTable()
	{
		if(isset($_SESSION[SessionName::CURRENT_PLAYER]))
		{
			unset($_SESSION[SessionName::CURRENT_PLAYER]);
			Game::getCurrent()->setStatus(Game::CLOSE);
			Game::getCurrent()->save();
		}
	}
	// -------------------------------------------------------------------------
}
?>