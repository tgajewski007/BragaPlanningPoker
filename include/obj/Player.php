<?php
/**
 * Created on 04-02-2014 08:20:35
 * @author Tomasz Gajewski
 * @package PlaningPoker
 * error prefix PP:105
 * Generated by SimplePHPDAOClassGenerator ver 2.2.0
 * https://sourceforge.net/projects/simplephpdaogen/
 * {please complete documentation}
 */
class Player extends PlayerDAO implements DAO
{
	// -------------------------------------------------------------------------
	/**
	 * Methods validate data before save
	 * @return boolean
	 */
	protected function check()
	{
		// TODO: add special validate
		return true;
	}
	// -------------------------------------------------------------------------
	public function isPlaying()
	{
		return $this->getIdRole() != Role::OBSERVER;
	}
	// -------------------------------------------------------------------------
	/**
	 * Methods return colection of Player
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAllByTable(TableDAO $table)
	{
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".player ";
		$sql .= "WHERE idtable = :IDTABLE ";
		$sql .= "AND idrole <> :OBSERVER ";
		$sql .= "ORDER BY CASE  WHEN iduser = :IDUZYTKOWNIK THEN 0 ELSE idplayer END  ";
		$db->setParam("IDTABLE", $table->getIdTable());
		$db->setParam("IDUZYTKOWNIK", User::getCurrent()->getIdUser());
		$db->setParam("OBSERVER", Role::OBSERVER);
		$db->query($sql);
		return new Collection($db, Player::get());
	}
	// -------------------------------------------------------------------------
	/**
	 * Method saves the object of the classPlayer
	 * @return boolean
	 */
	public function save()
	{
		if($this->check())
		{
			if($this->isReaded())
			{
				return $this->update();
			}
			else
			{
				return $this->create();
			}
		}
		else
		{
			return false;
		}
	}
	// -------------------------------------------------------------------------
	protected static function findCurrent()
	{
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".player ";
		$sql .= "WHERE idtable = :IDTABLE ";
		$sql .= "AND iduser = :IDUSER ";
		$sql .= "ORDER BY idplayer ";
		$db->setParam("IDTABLE", Table::getCurrent()->getIdTable());
		$db->setParam("IDUSER", User::getCurrent()->getIdUser());
		$db->setLimit(0, 1);
		$db->query($sql);
		if($db->nextRecord())
		{
			return self::getByDataSource($db);
		}
		else
		{
			$p = self::get();
			$p->setIdRole(Role::DEVELOPER);
			$p->setIdUser(User::getCurrent()->getIdUser());
			$p->setIdTable(Table::getCurrent()->getIdTable());
			$p->save();
			return $p;
		}
	}
	// -------------------------------------------------------------------------
	/**
	 * Method removes an object of class Player
	 * @return boolean
	 */
	public function kill()
	{
		// TODO: this method may be changed when record can not be deleted from
		// table
		return $this->destroy();
	}
	// -------------------------------------------------------------------------
	/**
	 * This method returns a collection of objects
	 * @return Collection &lt;Player&gt;
	 */
	public static function getAll()
	{
		// TODO: this is example of method selecting multi rec from table
		$db = new DB();
		$sql = "SELECT * ";
		$sql .= "FROM " . DB_SCHEMA . ".player ";
		$db->query($sql);
		return new Collection($db, self::get());
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return Player
	 * @throws PlayerException
	 */
	public static function getCurrent()
	{
		if(!isset($_SESSION[SessionName::CURRENT_PLAYER]))
		{
			self::setCurrent(Player::findCurrent());
		}
		if(self::get($_SESSION[SessionName::CURRENT_PLAYER])->getIdTable() != Table::getCurrent()->getIdTable())
		{
			self::setCurrent(Player::findCurrent());
		}
		return self::get($_SESSION[SessionName::CURRENT_PLAYER]);
	}
	// -------------------------------------------------------------------------
	protected static function setCurrent(Player $p)
	{
		$_SESSION[SessionName::CURRENT_PLAYER] = $p->getIdPlayer();
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @return boolean
	 */
	public function canCreateTask()
	{
		return ($this->getIdRole() == Role::BANCO || $this->getIdRole() == Role::PRODUCT_OWNER);
	}
	// -------------------------------------------------------------------------
	public function getCurrentGame()
	{
		return Game::getCurrentGameForPlayer($this);
	}
	// -------------------------------------------------------------------------
	/**
	 *
	 * @param Table $t
	 * @throws PlayerException
	 */
	public function sitDownToTable(Table $t)
	{
		foreach(Player::getAllByUser(User::getCurrent()) as $p)/* @var $p Player */
		{
			if($this->getIdTable() != $t->getIdTable())
			{
				$p->setIdRole(Role::OBSERVER);
				$p->save();
			}
		}
		// TODO: być może sprawdzić czy nie jest pierwszy... i zrobić z niego Bankiera
		$this->setIdTable($t->getIdTable());
		if($this->getIdRole() == Role::OBSERVER)
		{
			$this->setIdRole(Role::DEVELOPER);
		}
		$this->save();
		self::setCurrent($this);
	}
	// -------------------------------------------------------------------------
	public function getUpFromTable()
	{
		$this->setIdRole(Role::OBSERVER);
		$this->getCurrentGame()->kill();
		return $this->save();
	}
	// -------------------------------------------------------------------------
}
?>